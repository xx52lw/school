//
//  LWNetWorkingTool.swift
//  Loter-swift
//
//  Created by 张星星 on 2018/3/30.
//  Copyright © 2018年 LW. All rights reserved.
//

import UIKit
import Alamofire
import HandyJSON

class LWNetWorkingTool<T:HandyJSON >: NSObject {
    
    /**
     获取服务器数据，并转化为模型（对Alamofire进一步封装） GET请求
     - parameter url:          url地址
     - parameter params:       请求参数
     - parameter keyPath:      需要转模型的数据字段
     - parameter successBlock: 成功回调
     - parameter errorBlock:   失败回调
     */
  class  func getDataFromeServiceRequest(url: String, params:[String: Any]? = nil, successBlock: @escaping (_ result: T?) -> Void, errorBlock: @escaping (_ error: NSError) -> Void) {
        Alamofire.request(url, method: .get, parameters: params, encoding: URLEncoding.default).responseString  {
            response in
            if let err = response.result.error {
                errorBlock(err as NSError)
            } else {
                let jsonString = response.result.value! as String
                let baseModel = JSONDeserializer<LWBaseModel>.deserializeFrom(json: jsonString)
                if baseModel?.code == 200 {
                   print(jsonString)
                    let jsonModel = JSONDeserializer<T>.deserializeFrom(json: jsonString, designatedPath: "data")
                    successBlock(jsonModel)
                }
                else {
                    print("requestError请求失败")
                }
            }
        }
    }
    /**
     获取服务器数据，并转化为模型（对Alamofire进一步封装） POST请求
     - parameter url:          url地址
     - parameter params:       请求参数
     - parameter keyPath:      需要转模型的数据字段
     - parameter successBlock: 成功回调
     - parameter errorBlock:   失败回调
     */
    class  func postDataFromeServiceRequest(url: String, params:[String: Any]? = nil, successBlock: @escaping (_ result: T?) -> Void, errorBlock: @escaping (_ error: NSError) -> Void) {
        Alamofire.request(url, method: .post, parameters: params, encoding: URLEncoding.default).responseString  {
            response in
            if let err = response.result.error {
                errorBlock(err as NSError)
            } else {
                let jsonString = response.result.value! as String
                let baseModel = JSONDeserializer<LWBaseModel>.deserializeFrom(json: jsonString)
                if baseModel?.code == 200 {
                    print(jsonString)
                    let jsonModel = JSONDeserializer<T>.deserializeFrom(json: jsonString, designatedPath: "data")
                    successBlock(jsonModel)
                }
                else {
                    print("requestError请求失败")
                }
            }
        }
    }
    /// 模型转字典
    class func getDictinoary(model : HandyJSON) -> Dictionary<String, Any>? {
        guard let dict = model.toJSON() else {
            return  Dictionary()
        }
        return dict
    }
    /// 字典转模型
    class func getModel(dict : Dictionary<String, Any>?) -> T {
        guard let model = T.deserialize(from: dict) else {
            return T()
        }
        return model
    }
    /// json字符串转模型
    class func getModel(jsonString : String,designatedPath: String? = nil) -> T {
        guard let model = T.deserialize(from: jsonString) else {
            return T()
        }
        return model
    }
    /// 模型转json字符串
    class func getJsonString(model : HandyJSON) -> (String) {
        guard let jsonStr = model.toJSONString() else {
            return ""
        }
        return jsonStr
    }
}
